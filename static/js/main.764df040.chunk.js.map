{"version":3,"sources":["Components/Toaster/index.js","redux/actions/action-types.js","redux/actions/user.js","Components/Users/index.js","App.js","serviceWorker.js","redux/reducers/globalReducer.js","redux/reducers/userReducer.js","redux/store/index.js","index.js"],"names":["displayToasterMessage","type","message","toast","success","autoClose","error","FETCH_ALL_USERS_PENDING","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_ERROR","OPEN_EDIT_MODAL","UPDATE_USER_PENDING","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","DELETE_USER_PENDING","DELETE_USER_SUCCESS","DELETE_USER_FAILED","fetchAllUsersAction","pageNumber","dispatch","fetch","then","res","json","users_data","catch","updateUserData","data","users","user_id","method","headers","body","JSON","stringify","i","id","first_name","last_name","email","updatedUsers","payload","console","log","deleteUserData","userId","ok","status","newUsers","filter","user","deleteUserSuccess","renderField","input","label","meta","touched","className","placeholder","Users","searchAction","target","setState","searchQuery","value","filterUsers","props","stringContains","RegExp","test","state","onSubmit","bind","userData","this","editPopupAction","edit_modal_opened","initialize","change","swal","title","text","icon","dangerMode","buttons","willDelete","deleteUserAction","values","updateUserAction","project_title","fetch_users_loading","fetch_users_error","handleSubmit","updating_user_pending","total_users","users_per_page","current_page","pageNumbers","renderPageNumbers","Math","ceil","push","map","number","classes","key","href","onClick","e","fetchUsersAction","Fragment","disabled","role","aria-hidden","onChange","scope","colSpan","src","style","height","width","alt","length","item","index","avatar","fillFormValuesAndEditPopup","deleteUser","Modal","isOpen","toggle","ModalHeader","ModalBody","Field","name","component","React","Component","config","form","validate","errors","enableReinitialize","keepDirtyOnReinitialize","UpdateForm","reduxForm","connect","global","usersData","is_users_data_loading","preventDefault","bool","editModalAction","App","Boolean","window","location","hostname","match","initialState","globalReducer","userReducer","action","total","per_page","page","rootReducer","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.764df040.chunk.js","sourcesContent":["import { toast } from \"react-toastify\";\r\n\r\n\r\nexport function displayToasterMessage(type,message){\r\n\treturn type==='success'? toast.success(message,{autoClose:3000}) : toast.error(message,{autoClose:3000})\r\n}","export const FETCH_ALL_USERS_PENDING = 'FETCH_ALL_USERS_PENDING';\r\nexport const FETCH_ALL_USERS_SUCCESS = 'FETCH_ALL_USERS_SUCCESS';\r\nexport const FETCH_ALL_USERS_ERROR = 'FETCH_ALL_USERS_ERROR';\r\nexport const OPEN_EDIT_MODAL = 'OPEN_EDIT_MODAL';\r\nexport const UPDATE_USER_PENDING = 'UPDATE_USER_PENDING';\r\nexport const UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\r\nexport const UPDATE_USER_FAILED = 'UPDATE_USER_FAILED';\r\nexport const DELETE_USER_PENDING = 'DELETE_USER_PENDING';\r\nexport const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\r\nexport const DELETE_USER_FAILED = 'DELETE_USER_FAILED';","import {displayToasterMessage} from '../../Components/Toaster/';\r\nimport {\r\n    FETCH_ALL_USERS_PENDING,\r\n    FETCH_ALL_USERS_SUCCESS,\r\n    FETCH_ALL_USERS_ERROR,\r\n    OPEN_EDIT_MODAL,\r\n    UPDATE_USER_PENDING,\r\n    UPDATE_USER_SUCCESS,\r\n    UPDATE_USER_FAILED,\r\n    DELETE_USER_PENDING,\r\n    DELETE_USER_SUCCESS,\r\n    DELETE_USER_FAILED\r\n} from './action-types';\r\n\r\nfunction fetchAllUsersPending() {\r\n    return {\r\n        type: FETCH_ALL_USERS_PENDING\r\n    }\r\n}\r\n\r\nfunction fetchAllUsersSuccess(usersData){\r\n    return {\r\n        type: FETCH_ALL_USERS_SUCCESS,\r\n        users_data: usersData\r\n    }\r\n}\r\n\r\nfunction fetchAllUsersError(){\r\n    return{\r\n        type: FETCH_ALL_USERS_ERROR\r\n    }\r\n}\r\n\r\nexport function fetchAllUsersAction(pageNumber) {\r\n    return function(dispatch){\r\n        dispatch(fetchAllUsersPending());\r\n        fetch('https://reqres.in/api/users?page='+pageNumber)\r\n            .then(res=>res.json())\r\n            .then(json=>{\r\n                dispatch(fetchAllUsersSuccess(json));\r\n            })\r\n            .catch(error=>{\r\n                displayToasterMessage('error','Network request failed!');\r\n                dispatch(fetchAllUsersError());\r\n            })        \r\n    }\r\n}\r\n\r\nexport function editModalAction(bool){\r\n    return{\r\n        type: OPEN_EDIT_MODAL,\r\n        payload:bool\r\n    }\r\n}\r\n\r\nfunction updateUserPending(){\r\n    return{\r\n        type: UPDATE_USER_PENDING\r\n    }\r\n}\r\n\r\nfunction updateUserSuccess(updatedUsers){\r\n    displayToasterMessage('success','User updated successfully!');\r\n    return{\r\n        type: UPDATE_USER_SUCCESS,\r\n        payload:{users:updatedUsers}\r\n    }\r\n}\r\n\r\nfunction updateUserFailed(){\r\n    displayToasterMessage('error','An error occured while updating the user!');\r\n    return{\r\n        type: UPDATE_USER_FAILED\r\n    }\r\n}\r\n\r\nexport function updateUserData(data,users){\r\n    return function(dispatch){\r\n        dispatch(updateUserPending());\r\n        fetch('https://reqres.in/api/users/'+data.user_id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data) \r\n        })\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            for (var i in users) {\r\n                if (users[i].id === data.user_id) {\r\n                    users[i].first_name = data.first_name;\r\n                    users[i].last_name = data.last_name;\r\n                    users[i].email = data.email;\r\n                    break;\r\n                }\r\n            }\r\n            dispatch(updateUserSuccess(users));\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            dispatch(updateUserFailed())\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteUserPending(){\r\n    return{\r\n        type: DELETE_USER_PENDING\r\n    }\r\n}\r\n\r\nfunction deleteUserSuccess(newUsers){\r\n    displayToasterMessage('success','User deleted successfully!');\r\n    return{\r\n        type: DELETE_USER_SUCCESS,\r\n        payload:{users:newUsers}\r\n    }\r\n}\r\n\r\nfunction deleteUserFailed(){\r\n    displayToasterMessage('error','An error occured while deleting the user!');\r\n    return{\r\n        type: DELETE_USER_FAILED\r\n    }\r\n}\r\n\r\nexport function deleteUserData(userId,users){\r\n    return function(dispatch){\r\n        dispatch(deleteUserPending());\r\n        fetch('https://reqres.in/api/users/'+userId, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            } \r\n        })\r\n        .then(res => {\r\n            if(res.ok && res.status===204){\r\n                let newUsers = users.filter(user=> user.id!==userId)\r\n                dispatch(deleteUserSuccess(newUsers));\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            dispatch(deleteUserFailed())\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {fetchAllUsersAction,editModalAction,updateUserData,deleteUserData} from '../../redux/actions/user';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport swal from 'sweetalert';\r\n\r\n\r\nconst renderField = ({\r\n  input,\r\n  label,\r\n  type,\r\n  meta: { touched, error }\r\n}) => (\r\n  <div>\r\n      <input {...input} className=\"form-control\" placeholder={label} type={type} />\r\n      {\r\n        touched &&\r\n        (error && <span className=\"form-error-message\">{error}</span>)\r\n      }\r\n  </div>\r\n);\r\n\r\nclass Users extends React.Component{\r\n    constructor(){\r\n      super();\r\n      this.state = {\r\n        searchQuery: ''\r\n      }\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    fillFormValuesAndEditPopup(userData){\r\n      this.props.editPopupAction(this.props.edit_modal_opened)\r\n      let data = {\r\n        first_name: userData.first_name,\r\n        last_name: userData.last_name,\r\n        email: userData.email\r\n      }\r\n      this.props.initialize(data);\r\n      this.props.change('user_id', userData.id)\r\n    }\r\n\r\n    deleteUser(userId){\r\n      swal({\r\n        title: \"Are you sure?\",\r\n        text: \"You want to delete the user?\",\r\n        icon: \"warning\",\r\n        dangerMode: true,\r\n        buttons: true\r\n      })\r\n      .then(willDelete => {\r\n        if (willDelete) {\r\n          this.props.deleteUserAction(userId,this.props.users)\r\n        }\r\n      })\r\n    }\r\n\r\n    onSubmit(values) {\r\n      this.props.updateUserAction(values,this.props.users);\r\n    }\r\n\r\n    searchAction = ({ target }) => {\r\n      this.setState({ searchQuery: target.value })\r\n    }\r\n\r\n    filterUsers = (searchQuery) => {\r\n\r\n      if (!searchQuery ) {\r\n        return this.props.users\r\n      } \r\n\r\n      return this.props.users.filter(user => {\r\n          const stringContains = new RegExp(searchQuery, 'i');\r\n          return stringContains.test(user.first_name) || stringContains.test(user.last_name) || stringContains.test(user.email)\r\n      })\r\n    }\r\n\r\n    render(){\r\n      console.log('rendering')\r\n        var {project_title,fetch_users_loading,edit_modal_opened,fetch_users_error,handleSubmit,updating_user_pending,total_users,users_per_page,current_page} = this.props;\r\n\r\n        const users = this.filterUsers(this.state.searchQuery)\r\n\r\n        var pageNumbers = [];\r\n        var renderPageNumbers = [];\r\n\r\n        if (total_users !== null) {\r\n          for (let i = 1; i <= Math.ceil(total_users / users_per_page); i++) {\r\n            pageNumbers.push(i);\r\n          }\r\n\r\n          renderPageNumbers = pageNumbers.map(number => {\r\n            let classes = current_page === number ? 'page-item active' : 'page-item';\r\n\r\n            return (\r\n                <li key={number} className={classes}>\r\n                  <a className=\"page-link\" href=\"#\" onClick={(e)=>this.props.fetchUsersAction(e,number)}>{number}</a>\r\n                </li>\r\n            );\r\n          });\r\n        }\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <h3> Project is about ({project_title})</h3>\r\n                    </div>\r\n                   \r\n                    <div className=\"row mt-5\">\r\n                      <div className=\"col-sm\">\r\n                      {\r\n                        (fetch_users_loading)?\r\n                          <button className=\"btn btn-secondary\" type=\"button\" disabled>\r\n                            <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                              Fetching...\r\n                          </button>\r\n                          :\r\n                          <button className=\"btn btn-secondary\" onClick={(e)=>this.props.fetchUsersAction(e,1)}>Fetch Users Data</button>\r\n                      }\r\n                      </div>\r\n                      <div className=\"col-sm\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Search here...\" onChange={this.searchAction} value={this.state.searchQuery} />\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row mt-5 table-responsive\">\r\n                        <table className=\"table table-hover table-bordered\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\">Sr. No</th>\r\n                              <th scope=\"col\">User Id</th>\r\n                              <th scope=\"col\">First Name</th>\r\n                              <th scope=\"col\">Last Name</th>\r\n                              <th scope=\"col\">Email</th>\r\n                              <th scope=\"col\">Avatar</th>\r\n                              <th scope=\"col\">Actions</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {\r\n                                (fetch_users_loading)?\r\n                                    <tr>\r\n                                        <td colSpan=\"7\">\r\n                                            <img src=\"/images/loader1.gif\" style={{height:'50px',width:'50px'}} className=\"img-fluid\" alt=\"loading\"/>\r\n                                        </td>\r\n                                    </tr>\r\n                                :\r\n                                (users.length>0)?\r\n                                    users.map((item,index)=>(\r\n                                        <tr key={item.id}>\r\n                                             <td>{index+1}</td>\r\n                                             <td>{item.id}</td>           \r\n                                             <td>{item.first_name}</td>           \r\n                                             <td>{item.last_name}</td>           \r\n                                             <td>{item.email}</td>           \r\n                                             <td>\r\n                                                 <img src={item.avatar} height=\"50\" width=\"50\" alt=\"avatar\"/>\r\n                                             </td>\r\n                                             <td>\r\n                                              <button type=\"button\" className=\"btn btn-primary\" onClick={()=>this.fillFormValuesAndEditPopup(item)}>Edit</button>\r\n                                              <button type=\"button\" className=\"btn btn-danger ml-1\" onClick={()=>this.deleteUser(item.id)}>Remove</button>\r\n                                             </td>                                             \r\n                                        </tr>\r\n                                    ))\r\n                                :\r\n                                <tr>\r\n                                {\r\n                                    (fetch_users_error)?\r\n                                        <td colSpan=\"7\">Error while fetching users data!</td>\r\n                                    :\r\n                                        <td colSpan=\"7\">No users found!</td>\r\n                                }   \r\n                                </tr>\r\n                            }\r\n                          </tbody>\r\n                        </table>\r\n\r\n                          <ul className=\"pagination\">\r\n                            {renderPageNumbers}\r\n                          </ul>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Modal isOpen={edit_modal_opened} toggle={()=>this.props.editPopupAction(edit_modal_opened)}>\r\n                        <ModalHeader toggle={()=>this.props.editPopupAction(edit_modal_opened)}>Update User Details</ModalHeader>\r\n                        <ModalBody>\r\n                          <form className=\"form\" onSubmit={handleSubmit(this.onSubmit)}>\r\n                              <div className=\"form-group\">\r\n                                <label className=\"label\">First Name</label>\r\n                                <Field className=\"form-control\" name=\"first_name\" component={renderField} type=\"text\" />\r\n                              </div>\r\n\r\n                              <div className=\"form-group\">\r\n                                <label className=\"label\">Last Name</label>\r\n                                <Field className=\"form-control\" name=\"last_name\" component={renderField} type=\"text\" />\r\n                              </div>\r\n\r\n                              <div className=\"form-group\">\r\n                                <label className=\"label\">Email</label>\r\n                                <Field className=\"form-control\" name=\"email\" component={renderField} type=\"email\" />\r\n                              </div>\r\n                              {\r\n                                (updating_user_pending)?\r\n                                  <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n                                    <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                     Updating...\r\n                                  </button>\r\n                                :                                \r\n                                <button className=\"btn btn-primary\">Update</button>\r\n                              }\r\n                          </form>\r\n                        </ModalBody>\r\n                      </Modal>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>            \r\n        );\r\n    }\r\n}\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n  \r\n  if(!values.first_name){\r\n    errors.first_name = 'First name is required!'\r\n  }\r\n  if(!values.last_name){\r\n    errors.last_name = 'Last name is required!'\r\n  }\r\n  if(!values.email){\r\n    errors.email = 'Email address is required!'\r\n  }else if(!values.email && !regex.test(values.email)){\r\n    errors.email = 'Invalid email address'\r\n  }\r\n  return errors \r\n}\r\n\r\nconst config = {\r\n  form: 'updateUserDetails',\r\n  validate,\r\n  enableReinitialize: true,\r\n  keepDirtyOnReinitialize: true\r\n}\r\n\r\nlet UpdateForm = reduxForm(config)(Users);\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        project_title: state.global.project_title,\r\n        users: state.usersData.users,\r\n        fetch_users_loading: state.usersData.is_users_data_loading,\r\n        fetch_users_error:state.usersData.error,\r\n        edit_modal_opened: state.usersData.edit_modal_opened,\r\n        updating_user_pending: state.usersData.updating_user_pending,\r\n        total_users:state.usersData.total_users,\r\n        users_per_page:state.usersData.users_per_page,\r\n        current_page:state.usersData.current_page\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        fetchUsersAction: (e,pageNumber) => {e.preventDefault(); dispatch(fetchAllUsersAction(pageNumber))},\r\n        editPopupAction: (bool)=>{dispatch(editModalAction(bool))},\r\n        updateUserAction: (data,users)=>{dispatch(updateUserData(data,users))},\r\n        deleteUserAction: (userId,users)=>{dispatch(deleteUserData(userId,users))}\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UpdateForm);","import React from 'react';\r\nimport User from './Components/Users/';\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nclass App extends React.Component {\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<User/>\r\n\t\t\t\t<ToastContainer />\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","let initialState = {\r\n\tproject_title:'Data fetching Application'\r\n}\r\n\r\nconst globalReducer = function(state=initialState,action){\r\n\treturn state;\r\n}\r\n\r\nexport default globalReducer;","import {\r\n    FETCH_ALL_USERS_PENDING, \r\n    FETCH_ALL_USERS_SUCCESS, \r\n    FETCH_ALL_USERS_ERROR,\r\n    OPEN_EDIT_MODAL,\r\n    UPDATE_USER_PENDING,\r\n    UPDATE_USER_SUCCESS,\r\n    UPDATE_USER_FAILED,\r\n    DELETE_USER_PENDING,\r\n    DELETE_USER_SUCCESS,\r\n    DELETE_USER_FAILED\r\n} from '../actions/action-types';\r\n\r\n\r\nconst initialState = {\r\n    is_users_data_loading: false,\r\n    users: [],\r\n    error: null,\r\n    edit_modal_opened:false,\r\n    updating_user_pending:false,\r\n    total_users: null,\r\n    users_per_page: null,\r\n    current_page: null    \r\n}\r\n\r\nconst userReducer = function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_ALL_USERS_PENDING: \r\n            return {\r\n                ...state,\r\n                is_users_data_loading: true\r\n            }\r\n        case FETCH_ALL_USERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                is_users_data_loading: false,\r\n                users: action.users_data.data,\r\n                total_users: action.users_data.total,\r\n                users_per_page: action.users_data.per_page,\r\n                current_page: action.users_data.page                   \r\n            }\r\n        case FETCH_ALL_USERS_ERROR:\r\n            return {\r\n                ...state,\r\n                is_users_data_loading: false,\r\n                error: true\r\n            }\r\n        case OPEN_EDIT_MODAL:\r\n            return {\r\n               ...state,\r\n               edit_modal_opened: !action.payload\r\n            }\r\n        case UPDATE_USER_PENDING:\r\n            return {\r\n               ...state,\r\n               updating_user_pending: true\r\n            }\r\n        case UPDATE_USER_SUCCESS:\r\n            return {\r\n               ...state,\r\n               updating_user_pending: false,\r\n               edit_modal_opened: false,\r\n               users:action.payload.users\r\n            }\r\n        case UPDATE_USER_FAILED:\r\n            return {\r\n               ...state,\r\n               updating_user_pending: false,\r\n               edit_modal_opened: false\r\n            }                                    \r\n        case DELETE_USER_PENDING:\r\n            return {\r\n               ...state,\r\n               updating_user_pending: true\r\n            }\r\n        case DELETE_USER_SUCCESS:\r\n            return {\r\n               ...state,\r\n               updating_user_pending: false,\r\n               users:action.payload.users\r\n            }\r\n        case DELETE_USER_FAILED:\r\n            return {\r\n               ...state,\r\n               updating_user_pending: false\r\n            }                    \r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","import {createStore,combineReducers,applyMiddleware,compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport globalReducer from '../reducers/globalReducer';\r\nimport userReducer from '../reducers/userReducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet rootReducer = combineReducers({\r\n\tglobal:globalReducer,\r\n\tusersData:userReducer,\r\n\tform: formReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(...[thunk])));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './redux/store/'\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}